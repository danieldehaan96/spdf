
#R script for Master Thesis Daniel de Haan

# Croston's method

#y        =       a numeric vector or time series of class ts
#h        =       Number of periods for forecasting.
#alpha    =       Value of alpha. Default value is 0.1.
#Formula  =       croston(y, h = 10, alpha = 0.1, x = y)

# SES

#y        =       a numeric vector or time series
#h        =       Number of periods for forecasting.
#damped   =       If TRUE, use a damped trend.
#seasonal =       Type of seasonality in hw model. "additive" or "multiplicative"
#level    =       Confidence level for prediction intervals.
#fan      =       If TRUE, level is set to seq(51,99,by=3). This is suitable for fan plots.
#initial  =       Method used for selecting initial state values. If optimal, the initial values are optimized along with the smoothing parameters using ets. If simple, the initial values are set to values obtained using simple calculations on the first few observations. See Hyndman & Athanasopoulos (2014) for details.
#exponential=     If TRUE, an exponential trend is fitted. Otherwise, the trend is (locally) linear.
#alpha    =       Value of smoothing parameter for the level. If NULL, it will be estimated.
#beta     =       Value of smoothing parameter for the trend. If NULL, it will be estimated.
#gamma    =       Value of smoothing parameter for the seasonal component. If NULL, it will be estimated.
#lambda   =       Box-Cox transformation parameter. Ignored if NULL. Otherwise, data transformed before model is estimated. When lambda=TRUE, additive.only is set to FALSE.
#biasadj  =       Use adjusted back-transformed mean for Box-Cox transformations. If TRUE, point forecasts and fitted values are mean forecast. Otherwise, these points can be considered the median of the forecast densities.
#Formula  =       ses(y, h=10, level=c(80,95), fan=FALSE,  initial=c("optimal","simple"), alpha=NULL,  lambda=NULL, biasadj=FALSE, x=y, ...)

# tsintermittent:
# 'croston', for the original method.
# 'sba', for the Syntetos-Boylan approximation.
# 'sbj', for the Shale-Boylan-Johnston correction.
# Formula =       crost(data)

install.packages("lightgbm", repos = "https://cran.r-project.org")
install.packages("tsintermittent")
library(tsintermittent)

library(lightgbm)
data(agaricus.train, package='lightgbm')
train <- agaricus.train
dtrain <- lgb.Dataset(train$data, label = train$label)
model <- lgb.cv(
  params = list(
    objective = "regression"
    , metric = "l2"
  )
  , data = dtrain
)

# gesimuleerde time series data simID(n=1, obs=60, idi=2, cv2=0.5, level=NULL)

tr <- simID(n=5000, obs=100, idi=5, cv2=0.5, level=2)






#simulating intermittent data
#eigen aanpassing is geen CV2 van nul omdat dat zorgt voor gedoe


install.packages("Rlab")                         # Install Rlab package
library("Rlab")                                  # Load Rlab package


#Example 4: Generating Random Numbers (rbern Function)
#To generate a set of random numbers with a Bernoulli distribution, we need to specify a seed and a sample size N first:
  
set.seed(8377)                        # Set seed for reproducibility
                                      # Specify sample size
#Then, we can apply the rbern function to create N Bernoulli distributed random numbers:

IDI <- c(1,1.16,1.32,1.6,2,4)
CV2 <- c(0.1,0.25,0.49,0.75,1,2)
Numberofobservations <- c(24,36,48,60,84,108)
probabilities <- (1/IDI)
rootsofCV2 <- sqrt(CV2)
sp <- 1
u <- 1
n <- 1
vectord <- c()


for (cv in rootsofCV2){
for (p in probabilities) {
for (i in Numberofobservations) {
    binaryvectorI <- rbern(i, prob = (p))
  u <- sample(10:50,1)
  sp <- (u/((cv^2)*(u+1)^2))
  n <- ((u*sp)/(1-sp))
  vectord <- rnbinom(i, n, sp)
  D <- vectord+1
  print(D*binaryvectorI)
}}}

croston(y, h = 10, alpha = 0.1, x = y)

u <- sample(10:50,1)
sp <- (u/((cv^2)*(u+1)^2))
n <- ((u*sp)/(1-sp))
vectord <- rnbinom(getalN, n, sp)
D <- vectord+1

D
vectord

cv <- rootsofCV2[3]
rnbinom(5, 2, 0.9)
rnbinom(getalN, n, prob)

sample(10:50,1)












